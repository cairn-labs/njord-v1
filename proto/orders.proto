syntax = "proto3";
import "product.proto";

enum OrderType {
    UNKNOWN_ORDER_TYPE = 0;
    MARKET_BUY = 1;
    MARKET_SELL = 2;
    LIMIT_BUY = 3;
    LIMIT_SELL = 4;
    CANCEL_ORDER = 5;
    SELL_STOP = 6;
}

enum OrderStatus {
    UNKNOWN_ORDER_STATUS = 0;
    DRAFT = 1;
    PLACED = 2;
    FILLED = 3;
    CANCELLED = 4;
}

message Order {
    string id = 1;

    OrderType order_type = 2;
    Product buy_product = 3;
    Product sell_product = 4;
    string price = 5;
    string amount = 12;
    OrderStatus status = 6;

    // For MARKET_BUY orders: if take_profit_price is set, add a limit sell order at this
    // price. If stop_loss_price is set, add a stop market order at this price. These are
    // implemented using Alpaca's bracket order functionality (https://alpaca.markets/docs/trading-on-alpaca/orders/)
    float take_profit_price = 14;
    float stop_loss_price = 15;

    // If set, don't execute this order until all parent orders have been filled
    repeated string parent_order_ids = 10;

    // If this is an order that directly affects another order (e.g. a CANCEL_ORDER)
    // then that order id is set here.
    string target_order_id = 11;

    string source_strategy = 13;
}


message OrderTree {
    repeated Order orders = 1;
}
